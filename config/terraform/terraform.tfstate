{
  "version": 4,
  "terraform_version": "1.10.2",
  "serial": 29,
  "lineage": "dc19f3bf-edcb-74fa-5054-e55eeb685dee",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "grafana",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "grafana",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "grafana",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "10.1.5",
                "chart": "grafana",
                "name": "grafana",
                "namespace": "monitoring",
                "revision": 2,
                "values": "{\"adminPassword\":\"deeznuts420\",\"adminUser\":\"admin\",\"datasources\":{\"datasources.yaml\":{\"apiVersion\":1,\"datasources\":[{\"access\":\"proxy\",\"apiVersion\":1,\"basicAuth\":false,\"editable\":false,\"isDefault\":false,\"name\":\"Tempo\",\"orgId\":1,\"type\":\"tempo\",\"uid\":\"tempo\",\"url\":\"http://tempo:3100\",\"version\":1},{\"access\":\"proxy\",\"basicAuth\":false,\"isDefault\":false,\"name\":\"Loki\",\"orgId\":1,\"type\":\"loki\",\"uid\":\"loki\",\"url\":\"http://loki:3100\"},{\"access\":\"proxy\",\"basicAuth\":false,\"isDefault\":false,\"name\":\"Prometheus\",\"orgId\":1,\"type\":\"prometheus\",\"uid\":\"prometheus\",\"url\":\"http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090\"},{\"access\":\"proxy\",\"basicAuth\":false,\"isDefault\":false,\"name\":\"Mimir\",\"orgId\":1,\"type\":\"prometheus\",\"uid\":\"mimir\",\"url\":\"http://mimir-nginx.monitoring.svc/prometheus\"}]}}}",
                "version": "6.60.6"
              }
            ],
            "name": "grafana",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "---\nadminUser: admin\nadminPassword: deeznuts420\n\ndatasources:\n  datasources.yaml:\n    apiVersion: 1\n\n    datasources:\n      - name: Tempo\n        type: tempo\n        access: proxy\n        orgId: 1\n        url: http://tempo:3100\n        basicAuth: false\n        isDefault: false\n        version: 1\n        editable: false\n        apiVersion: 1\n        uid: tempo\n      - name: Loki\n        type: loki\n        uid: loki\n        access: proxy\n        orgId: 1\n        url: http://loki:3100\n        basicAuth: false\n        isDefault: false\n      - name: Prometheus\n        type: prometheus\n        uid: prometheus\n        access: proxy\n        orgId: 1\n        url: http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090\n        basicAuth: false\n        isDefault: false\n      - name: Mimir\n        type: prometheus\n        uid: mimir\n        access: proxy\n        orgId: 1\n        url: http://mimir-nginx.monitoring.svc/prometheus\n        basicAuth: false\n        isDefault: false\n\n"
            ],
            "verify": false,
            "version": "6.60.6",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "loki",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "loki-stack",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "loki",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.9.3",
                "chart": "loki-stack",
                "name": "loki",
                "namespace": "monitoring",
                "revision": 1,
                "values": "{\"filebeat\":{\"enabled\":false,\"filebeatConfig\":{\"filebeat.yml\":\"# logging.level: debug\\nfilebeat.inputs:\\n- type: container\\n  paths:\\n    - /var/log/containers/*.log\\n  processors:\\n  - add_kubernetes_metadata:\\n      host: ${NODE_NAME}\\n      matchers:\\n      - logs_path:\\n          logs_path: \\\"/var/log/containers/\\\"\\noutput.logstash:\\n  hosts: [\\\"logstash-loki:5044\\\"]\\n\"}},\"fluent-bit\":{\"enabled\":false},\"grafana\":{\"enabled\":false,\"image\":{\"tag\":\"10.3.3\"},\"sidecar\":{\"datasources\":{\"enabled\":true,\"label\":\"\",\"labelValue\":\"\",\"maxLines\":1000}}},\"logstash\":{\"enabled\":false,\"filters\":{\"main\":\"filter {\\n  if [kubernetes] {\\n    mutate {\\n      add_field =\\u003e {\\n        \\\"container_name\\\" =\\u003e \\\"%{[kubernetes][container][name]}\\\"\\n        \\\"namespace\\\" =\\u003e \\\"%{[kubernetes][namespace]}\\\"\\n        \\\"pod\\\" =\\u003e \\\"%{[kubernetes][pod][name]}\\\"\\n      }\\n      replace =\\u003e { \\\"host\\\" =\\u003e \\\"%{[kubernetes][node][name]}\\\"}\\n    }\\n  }\\n  mutate {\\n    remove_field =\\u003e [\\\"tags\\\"]\\n  }\\n}\"},\"image\":\"grafana/logstash-output-loki\",\"imageTag\":\"1.0.1\",\"outputs\":{\"main\":\"output {\\n  loki {\\n    url =\\u003e \\\"http://loki:3100/loki/api/v1/push\\\"\\n    #username =\\u003e \\\"test\\\"\\n    #password =\\u003e \\\"test\\\"\\n  }\\n  # stdout { codec =\\u003e rubydebug }\\n}\"}},\"loki\":{\"datasource\":{\"jsonData\":\"{}\",\"uid\":\"\"},\"enabled\":true,\"isDefault\":true,\"livenessProbe\":{\"httpGet\":{\"path\":\"/ready\",\"port\":\"http-metrics\"},\"initialDelaySeconds\":45},\"readinessProbe\":{\"httpGet\":{\"path\":\"/ready\",\"port\":\"http-metrics\"},\"initialDelaySeconds\":45},\"url\":\"http://loki.monitoring:3100\"},\"prometheus\":{\"datasource\":{\"jsonData\":\"{}\"},\"enabled\":false,\"isDefault\":false,\"url\":\"http://{{ include \\\"prometheus.fullname\\\" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}\"},\"promtail\":{\"config\":{\"clients\":[{\"url\":\"http://{{ .Release.Name }}:3100/loki/api/v1/push\"}],\"logLevel\":\"info\",\"serverPort\":3201},\"enabled\":true},\"proxy\":{\"http_proxy\":\"\",\"https_proxy\":\"\",\"no_proxy\":\"\"},\"test_pod\":{\"enabled\":true,\"image\":\"bats/bats:1.8.2\",\"pullPolicy\":\"IfNotPresent\"}}",
                "version": "2.10.2"
              }
            ],
            "name": "loki",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "test_pod:\n  enabled: true\n  image: bats/bats:1.8.2\n  pullPolicy: IfNotPresent\n\nloki:\n  enabled: true\n  isDefault: true\n  #url: http://{{(include \"loki.serviceName\" .)}}:{{ .Values.loki.service.port }}\n  url: http://loki.monitoring:3100\n  readinessProbe:\n    httpGet:\n      path: /ready\n      port: http-metrics\n    initialDelaySeconds: 45\n  livenessProbe:\n    httpGet:\n      path: /ready\n      port: http-metrics\n    initialDelaySeconds: 45\n  datasource:\n    jsonData: \"{}\"\n    uid: \"\"\n\n\npromtail:\n  enabled: true\n  config:\n    logLevel: info\n    serverPort: 3201\n    clients:\n      - url: http://{{ .Release.Name }}:3100/loki/api/v1/push\n\nfluent-bit:\n  enabled: false\n\ngrafana:\n  enabled: false\n  sidecar:\n    datasources:\n      label: \"\"\n      labelValue: \"\"\n      enabled: true\n      maxLines: 1000\n  image:\n    tag: 10.3.3\n\nprometheus:\n  enabled: false\n  isDefault: false\n  url: http://{{ include \"prometheus.fullname\" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}\n  datasource:\n    jsonData: \"{}\"\n\nfilebeat:\n  enabled: false\n  filebeatConfig:\n    filebeat.yml: |\n      # logging.level: debug\n      filebeat.inputs:\n      - type: container\n        paths:\n          - /var/log/containers/*.log\n        processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n            - logs_path:\n                logs_path: \"/var/log/containers/\"\n      output.logstash:\n        hosts: [\"logstash-loki:5044\"]\n\nlogstash:\n  enabled: false\n  image: grafana/logstash-output-loki\n  imageTag: 1.0.1\n  filters:\n    main: |-\n      filter {\n        if [kubernetes] {\n          mutate {\n            add_field =\u003e {\n              \"container_name\" =\u003e \"%{[kubernetes][container][name]}\"\n              \"namespace\" =\u003e \"%{[kubernetes][namespace]}\"\n              \"pod\" =\u003e \"%{[kubernetes][pod][name]}\"\n            }\n            replace =\u003e { \"host\" =\u003e \"%{[kubernetes][node][name]}\"}\n          }\n        }\n        mutate {\n          remove_field =\u003e [\"tags\"]\n        }\n      }\n  outputs:\n    main: |-\n      output {\n        loki {\n          url =\u003e \"http://loki:3100/loki/api/v1/push\"\n          #username =\u003e \"test\"\n          #password =\u003e \"test\"\n        }\n        # stdout { codec =\u003e rubydebug }\n      }\n\n# proxy is currently only used by loki test pod\n# Note: If http_proxy/https_proxy are set, then no_proxy should include the\n# loki service name, so that tests are able to communicate with the loki\n# service.\nproxy:\n  http_proxy: \"\"\n  https_proxy: \"\"\n  no_proxy: \"\"\n\n"
            ],
            "verify": false,
            "version": "2.10.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "postgres-exporter",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "prometheus-postgres-exporter ",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "postgres-exporter",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.16.0",
                "chart": "prometheus-postgres-exporter",
                "name": "postgres-exporter",
                "namespace": "monitoring",
                "revision": 1,
                "values": "{\"affinity\":{},\"annotations\":{},\"automountServiceAccountToken\":false,\"command\":[],\"config\":{\"datasource\":{\"database\":\"fit-me-dev\",\"extraParams\":\"\",\"host\":\"postgres-service.fitmeapp.svc.cluster.local\",\"password\":\"postgres\",\"passwordFile\":\"\",\"passwordSecret\":{},\"pgpassfile\":\"\",\"port\":\"5432\",\"sslmode\":\"disable\",\"user\":\"postgres\",\"userFile\":\"\",\"userSecret\":{}},\"datasourceSecret\":{},\"disableCollectorBgwriter\":false,\"disableCollectorDatabase\":false,\"disableDefaultMetrics\":false,\"disableSettingsMetrics\":false,\"existingSecret\":{\"enabled\":false,\"name\":\"\"},\"extraArgs\":[],\"logFormat\":\"\",\"logLevel\":\"\",\"postgresExporter\":\"\"},\"deployment\":{\"annotations\":{},\"labels\":{}},\"extraContainers\":[],\"extraEnvs\":[],\"extraManifests\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"hostAliases\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"registry\":\"quay.io\",\"repository\":\"prometheuscommunity/postgres-exporter\",\"tag\":\"\"},\"initContainers\":[],\"livenessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":\"http\",\"scheme\":\"HTTP\"},\"timeoutSeconds\":3},\"networkPolicy\":{\"enabled\":false,\"labels\":{}},\"nodeSelector\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1},\"podLabels\":{},\"podSecurityContext\":{\"runAsGroup\":1001,\"runAsNonRoot\":true,\"runAsUser\":1001,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"priorityClassName\":\"\",\"prometheusRule\":{\"additionalLabels\":{},\"enabled\":false,\"namespace\":\"\",\"rules\":[]},\"rbac\":{\"create\":true},\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":\"http\",\"scheme\":\"HTTP\"},\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"privileged\":false,\"readOnlyRootFilesystem\":true},\"service\":{\"annotations\":{},\"labels\":{},\"name\":\"http\",\"port\":80,\"targetPort\":9187,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"create\":true,\"name\":null},\"serviceMonitor\":{\"additionalLabels\":{\"release\":\"prometheus\"},\"enabled\":true,\"interval\":\"30s\",\"multipleTarget\":{\"enabled\":false,\"sharedAuthModule\":{\"enabled\":false,\"name\":\"\"},\"targets\":[]},\"namespace\":\"monitoring\"},\"tolerations\":[]}",
                "version": "6.7.1"
              }
            ],
            "name": "postgres-exporter",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "replicaCount: 1\n\nimage:\n  registry: quay.io\n  repository: prometheuscommunity/postgres-exporter\n  # if not set appVersion field from Chart.yaml is used\n  tag: \"\"\n  pullPolicy: IfNotPresent\n\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistrKeySecretName\n\ncommand: []\n\nservice:\n  type: ClusterIP\n  port: 80\n  targetPort: 9187\n  name: http\n  labels: {}\n  annotations: {}\n\nautomountServiceAccountToken: false\n\nserviceMonitor:\n  # When set true then use a ServiceMonitor to configure scraping\n  enabled: true\n  namespace: monitoring\n  interval: 30s\n  additionalLabels:\n    release: prometheus\n  # Set the namespace the ServiceMonitor should be deployed\n  # namespace: monitoring\n  # Set how frequently Prometheus should scrape\n  # interval: 30s\n  # Set path to cloudwatch-exporter telemtery-path\n  # telemetryPath: /metrics\n  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator\n  # labels:\n  # Set timeout for scrape\n  # timeout: 10s\n  # Set of labels to transfer from the Kubernetes Service onto the target\n  # targetLabels: []\n  # MetricRelabelConfigs to apply to samples before ingestion\n  # metricRelabelings: []\n  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config\n  # relabelings: []\n  # HTTP scheme to use for scraping. For example `http` or `https`. Default is `http`.\n  # scheme: http\n  # TLS configuration to use when scraping the metric endpoint by Prometheus.\n  # tlsConfig: {}\n\n   # Use multipleTarget mode\n  multipleTarget:\n    enabled: false\n    # Use the same auth module for every target\n    # The config file should have a section like [$name]\n    sharedAuthModule:\n      enabled: false\n      name: \"\"\n\n    # Define each target's endpoint and name\n    # When not using sharedAuthModule the config file should have one authModule for each target with key \"client.$name\"\n    targets: []\n      # - endpoint: pg01.local\n      #   name: pg01 (there needs to exist an authModule with key \"client.pg01\" if not using sharedAuthModule)\n      #   port: default 5432\n\nprometheusRule:\n  enabled: false\n  additionalLabels: {}\n  namespace: \"\"\n  rules: []\n    ## These are just examples rules, please adapt them to your needs.\n    ## Make sure to constraint the rules to the current prometheus-postgres-exporter service.\n    # - alert: HugeReplicationLag\n    #   expr: pg_replication_lag{service=\"{{ template \"prometheus-postgres-exporter.fullname\" . }}\"} / 3600 \u003e 1\n    #   for: 1m\n    #   labels:\n    #     severity: critical\n    #   annotations:\n    #     description: replication for {{ template \"prometheus-postgres-exporter.fullname\" . }} PostgreSQL is lagging by {{ \"{{ $value }}\" }} hour(s).\n    #     summary: PostgreSQL replication is lagging by {{ \"{{ $value }}\" }} hour(s).\n\npriorityClassName: \"\"\n\nresources: {}\n  # We usually recommend not to specify default resources and to leave this as a conscious\n  # choice for the user. This also increases chances charts run on environments with little\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n  # limits:\n  #   cpu: 100m\n  #    memory: 128Mi\n  # requests:\n  #   cpu: 100m\n  #   memory: 128Mi\n\nrbac:\n  # Specifies whether RBAC resources should be created\n  create: true\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n  # Add annotations to the ServiceAccount, useful for EKS IAM Roles for Service Accounts or Google Workload Identity.\n  annotations: {}\n\n# Add a default ingress to allow namespace access to service.targetPort\n# Helpful if other NetworkPolicies are configured in the namespace\nnetworkPolicy:\n  # Specifies whether a NetworkPolicy should be created\n  enabled: false\n  # Set labels for the NetworkPolicy\n  labels: {}\n\n# The securityContext of the pod.\n# See https://kubernetes.io/docs/concepts/policy/security-context/ for more.\npodSecurityContext:\n  runAsGroup: 1001\n  runAsUser: 1001\n  runAsNonRoot: true\n  seccompProfile:\n    type: RuntimeDefault\n\n# The securityContext of the container.\n# See https://kubernetes.io/docs/concepts/policy/security-context/ for more.\nsecurityContext:\n  allowPrivilegeEscalation: false\n  capabilities:\n    drop:\n      - ALL\n  privileged: false\n  readOnlyRootFilesystem: true\n\nhostAliases: []\n  # Set Host Aliases as per https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/\n  # - ip: \"127.0.0.1\"\n  #   hostnames:\n  #   - \"foo.local\"\n  #   - \"bar.local\"\n\n#change later\nconfig:\n  ## The datasource properties on config are passed through helm tpl function.\n  ## ref: https://helm.sh/docs/developing_charts/#using-the-tpl-function\n  datasource:\n    # Specify one of both datasource or datasourceSecret\n    host: postgres-service.fitmeapp.svc.cluster.local\n    user: postgres\n    # Specify userFile if DB username is stored in a file.\n    # For example, to use with vault-injector from Hashicorp\n    userFile: ''\n    userSecret: {}\n    # Secret name\n    #  name:\n    # User key inside secret\n    #  key:\n    # Only one of password, passwordFile, passwordSecret and pgpassfile can be specified\n    password: postgres\n    # Specify passwordFile if DB password is stored in a file.\n    # For example, to use with vault-injector from Hashicorp\n    passwordFile: ''\n    # Specify passwordSecret if DB password is stored in secret.\n    passwordSecret: {}\n    # Secret name\n    #  name:\n    # Password key inside secret\n    #  key:\n    pgpassfile: ''\n    # If pgpassfile is set, it is used to initialize the PGPASSFILE environment variable.\n    # See https://www.postgresql.org/docs/14/libpq-pgpass.html for more info.\n    port: \"5432\"\n    database: fit-me-dev\n    sslmode: disable\n    extraParams: ''\n  datasourceSecret: {}\n    # Specifies if datasource should be sourced from secret value in format: postgresql://login:password@hostname:port/dbname?sslmode=disable\n    # Multiple Postgres databases can be configured by comma separated postgres connection strings\n    # Secret name\n    #  name:\n    # Connection string key inside secret\n    #  key:\n  disableCollectorDatabase: false\n  disableCollectorBgwriter: false\n  disableDefaultMetrics: false\n  disableSettingsMetrics: false\n\n  # possible values debug, info, warn, error, fatal\n  logLevel: \"\"\n  # possible values logfmt, json\n  logFormat: \"\"\n  extraArgs: []\n\n  # postgres_exporter.yml\n  postgresExporter: \"\"\n#     auth_modules:\n#       first:\n#         type: userpass\n#         userpass:\n#           username: postgres\n#           password: postgres\n#         options:\n#           sslmode: disable\n\n  # define an existing secret to be mounted as the config file\n  # needs to have the key 'postgres_exporter.yml'\n  existingSecret:\n    enabled: false\n    name: \"\"\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\nannotations: {}\n\npodLabels: {}\n\n# Configurable probes. If TLS client authentication is enabled at the exporter, TCP probe must be used.\nlivenessProbe:\n  httpGet:\n    path: /\n    port: http\n    scheme: HTTP\n  # tcpSocket:\n  #   port: http\n  timeoutSeconds: 3\n\nreadinessProbe:\n  httpGet:\n    path: /\n    port: http\n    scheme: HTTP\n  # tcpSocket:\n  #   port: http\n  timeoutSeconds: 1\n\n# Labels and annotations to attach to the deployment resource\ndeployment:\n  labels: {}\n  annotations: {}\n\n# ExtraEnvs\nextraEnvs: []\n#extraEnvs:\n#    - name: DATA_SOURCE_NAME\n#      value: \"postgresql://postgres:postgres@postgres-service.fitmeapp.svc.cluster.local:5432/fit-me-dev\"\n#extraEnvs:\n#  - name: DATA_SOURCE_NAME\n#    #value: \"postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)\"\n#    value: \"postgresql://postgres:postgres@postgres-service.fitmeapp.svc.cluster.local:5432/fit-me-dev\"\n  # - name: EXTRA_ENV\n  #   value: value\n  # - name: POD_NAMESPACE\n  #   valueFrom:\n  #     fieldRef:\n  #       fieldPath: metadata.namespace\n\n# Init containers, e. g. for secrets creation before the exporter\ninitContainers: []\n  # - name:\n  #   image:\n  #   volumeMounts:\n  #     - name: creds\n  #       mountPath: /creds\n\n# Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy\nextraContainers: []\n\n# Additional volumes, e. g. for secrets used in an extraContainer\nextraVolumes: []\n# Uncomment for mounting custom ca-certificates\n#  - name: ssl-certs\n#    secret:\n#      defaultMode: 420\n#      items:\n#      - key: ca-certificates.crt\n#        path: ca-certificates.crt\n#      secretName: ssl-certs\n\n# Additional volume mounts\nextraVolumeMounts: []\n# Uncomment for mounting custom ca-certificates file into container\n#  - name: ssl-certs\n#    mountPath: /etc/ssl/certs/ca-certificates.crt\n#    subPath: ca-certificates.crt\n\n## Extra manifests to deploy as an array\nextraManifests: []\n  # - apiVersion: v1\n  #   kind: ConfigMap\n  #   metadata:\n  #   labels:\n  #     name: postgres-exporter-extra\n  #   data:\n  #     extra-data: \"value\"\n\npodDisruptionBudget:\n  enabled: false\n  maxUnavailable: 1\n\n"
            ],
            "verify": false,
            "version": "6.7.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "prometheus",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "prometheus",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.78.2",
                "chart": "kube-prometheus-stack",
                "name": "prometheus",
                "namespace": "monitoring",
                "revision": 2,
                "values": "{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"Prometheus\",\"metadata\":{\"annotations\":{\"meta.helm.sh/release-name\":\"prometheus\",\"meta.helm.sh/release-namespace\":\"default\"},\"generation\":2,\"labels\":{\"app\":\"kube-prometheus-stack-prometheus\",\"app.kubernetes.io/instance\":\"prometheus\",\"app.kubernetes.io/managed-by\":\"Helm\",\"app.kubernetes.io/part-of\":\"kube-prometheus-stack\",\"app.kubernetes.io/version\":\"30.0.1\",\"chart\":\"kube-prometheus-stack-30.0.1\",\"heritage\":\"Helm\",\"release\":\"prometheus\"},\"name\":\"prometheus-kube-prometheus-prometheus\",\"namespace\":\"default\"},\"spec\":{\"alerting\":null,\"alertmanagers\":[{\"apiVersion\":\"v2\",\"name\":\"prometheus-kube-prometheus-alertmanager\",\"namespace\":\"default\",\"pathPrefix\":\"/\",\"port\":\"http-web\"}],\"enableAdminAPI\":false,\"enableFeatures\":[\"remote-write-receiver\"],\"externalUrl\":\"http://prometheus-kube-prometheus-prometheus.default:9090\",\"fsGroup\":2000,\"image\":\"quay.io/prometheus/prometheus:v2.32.1\",\"listenLocal\":false,\"logFormat\":\"logfmt\",\"logLevel\":\"info\",\"paused\":false,\"podMonitorNamespaceSelector\":{},\"podMonitorSelector\":{\"matchLabels\":null,\"release\":\"prometheus\"},\"portName\":\"http-web\",\"probeNamespaceSelector\":{},\"probeSelector\":{\"matchLabels\":null,\"release\":\"prometheus\"},\"replicas\":1,\"retention\":\"10d\",\"routePrefix\":\"/\",\"ruleNamespaceSelector\":{},\"ruleSelector\":{\"matchLabels\":null,\"release\":\"prometheus\"},\"runAsGroup\":2000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"securityContext\":null,\"serviceAccountName\":\"prometheus-kube-prometheus-prometheus\",\"serviceMonitorNamespaceSelector\":{},\"serviceMonitorSelector\":{\"matchLabels\":null,\"release\":\"prometheus\"},\"shards\":1,\"version\":\"v2.32.1\"}}",
                "version": "66.5.0"
              }
            ],
            "name": "prometheus",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "# kubectl edit Prometheus prometheus-kube-prometheus-prometheus\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  annotations:\n    meta.helm.sh/release-name: prometheus\n    meta.helm.sh/release-namespace: default\n  generation: 2\n  labels:\n    app: kube-prometheus-stack-prometheus\n    app.kubernetes.io/instance: prometheus\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/part-of: kube-prometheus-stack\n    app.kubernetes.io/version: 30.0.1\n    chart: kube-prometheus-stack-30.0.1\n    heritage: Helm\n    release: prometheus\n  name: prometheus-kube-prometheus-prometheus\n  namespace: default\nspec:\n  alerting:\n  alertmanagers:\n    - apiVersion: v2\n      name: prometheus-kube-prometheus-alertmanager\n      namespace: default\n      pathPrefix: /\n      port: http-web\n  enableAdminAPI: false\n  enableFeatures:\n    - remote-write-receiver\n  externalUrl: http://prometheus-kube-prometheus-prometheus.default:9090\n  image: quay.io/prometheus/prometheus:v2.32.1\n  listenLocal: false\n  logFormat: logfmt\n  logLevel: info\n  paused: false\n  podMonitorNamespaceSelector: {}\n  podMonitorSelector:\n    matchLabels:\n    release: prometheus\n  portName: http-web\n  probeNamespaceSelector: {}\n  probeSelector:\n    matchLabels:\n    release: prometheus\n  replicas: 1\n  retention: 10d\n  routePrefix: /\n  ruleNamespaceSelector: {}\n  ruleSelector:\n    matchLabels:\n    release: prometheus\n  securityContext:\n  fsGroup: 2000\n  runAsGroup: 2000\n  runAsNonRoot: true\n  runAsUser: 1000\n  serviceAccountName: prometheus-kube-prometheus-prometheus\n  serviceMonitorNamespaceSelector: {}\n  serviceMonitorSelector:\n    matchLabels:\n    release: prometheus\n  shards: 1\n  version: v2.32.1\n"
            ],
            "verify": false,
            "version": "66.5.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "redis-exporter",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "prometheus-redis-exporter",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "redis-exporter",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v1.66.0",
                "chart": "prometheus-redis-exporter",
                "name": "redis-exporter",
                "namespace": "monitoring",
                "revision": 1,
                "values": "{\"affinity\":{},\"annotations\":{},\"auth\":{\"enabled\":false,\"redisPassword\":\"\",\"redisPasswordFile\":{\"mountPath\":\"/auth\",\"secret\":{\"key\":\"\",\"name\":\"\"}},\"redisUser\":\"\",\"secret\":{\"key\":\"\",\"name\":\"\"}},\"command\":[],\"customLabels\":{},\"env\":{},\"extraArgs\":{},\"extraManifests\":[],\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"oliver006/redis_exporter\",\"tag\":\"\"},\"labels\":{},\"nodeSelector\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"prometheusRule\":{\"additionalLabels\":{},\"enabled\":false,\"namespace\":\"\",\"rules\":[]},\"rbac\":{\"create\":true,\"pspEnabled\":true},\"redisAddress\":\"redis://redis-service.fitmeapp.svc.cluster.local:6379\",\"redisAddressConfig\":{\"enabled\":false,\"isSecret\":false,\"source\":{\"key\":\"\",\"name\":\"\"}},\"redisTlsConfig\":{\"caCertFile\":{\"secret\":{\"key\":\"\",\"name\":\"\"}},\"clientCertFile\":{\"secret\":{\"key\":\"\",\"name\":\"\"}},\"clientKeyFile\":{\"secret\":{\"key\":\"\",\"name\":\"\"}},\"enabled\":false,\"mountPath\":\"/tls\",\"serverCertFile\":{\"secret\":{\"key\":\"\",\"name\":\"\"}},\"serverKeyFile\":{\"secret\":{\"key\":\"\",\"name\":\"\"}},\"skipTlsVerification\":false},\"replicaCount\":1,\"resources\":{},\"securityContext\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":9121,\"portName\":\"redis-exporter\",\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true,\"name\":null},\"serviceMonitor\":{\"additionalMetricsRelabels\":{},\"additionalRelabeling\":[],\"enabled\":false,\"multipleTarget\":false,\"targets\":[]},\"tolerations\":[]}",
                "version": "6.8.0"
              }
            ],
            "name": "redis-exporter",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "rbac:\n  # Specifies whether RBAC resources should be created\n  create: true\n  # Specifies whether a PodSecurityPolicy should be created\n  pspEnabled: true\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n\nreplicaCount: 1\nimage:\n  repository: oliver006/redis_exporter\n  pullPolicy: IfNotPresent\n  # Overrides the image tag whose default is the chart appVersion.\n  tag: \"\"\n\ncommand: []\n\nextraArgs: {}\n\n# global custom labels, applied to all resrouces\ncustomLabels: {}\n\nsecurityContext: {}\n\n# Additional Environment variables\nenv: {}\n# - name: REDIS_PASSWORD\n#   valueFrom:\n#     secretKeyRef:\n#       key: redis-password\n#       name: redis-config-0.0.2\nservice:\n  type: ClusterIP\n  port: 9121\n  portName: redis-exporter\n  annotations: {}\n  labels: {}\n    # prometheus.io/path: /metrics\n    # prometheus.io/port: \"9121\"\n    # prometheus.io/scrape: \"true\"\nresources: {}\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\npriorityClassName: \"\"\n\n## Extra manifests to deploy as an array\nextraManifests: []\n  # - apiVersion: v1\n  #   kind: ConfigMap\n  #   metadata:\n  #   labels:\n  #     name: redis-exporter-extra\n  #   data:\n  #     extra-data: \"value\"\n\n# If serviceMonitor.multipleTarget is enabled, this configuration is actually not used\nredisAddress: redis://redis-service.fitmeapp.svc.cluster.local:6379\n\n# deployment additional annotations and labels\nannotations: {}\nlabels: {}\n#  prometheus.io/path: /metrics\n#  prometheus.io/port: \"9121\"\n#  prometheus.io/scrape: \"true\"\n\nredisAddressConfig:\n  # configure `REDIS_ADDR` from a configmap\n  enabled: false\n  # if `true` the `REDIS_ADDR` is sourced on a secret instead of a configmap\n  isSecret: false\n  # Use an existing configmap or secret will ignore redisAddress\n  source:\n    name: \"\"\n    key: \"\"\n\nredisTlsConfig:\n  # Use TLS configuration\n  enabled: false\n  # Whether to to skip TLS verification\n  skipTlsVerification: false\n  # All secrets key about TLS config will be mounted into this path\n  mountPath: /tls\n\n  # REDIS_EXPORTER_TLS_CA_CERT_FILE will be set to /tls/tls-ca-cert.crt\n  caCertFile:\n    secret:\n      name: \"\"\n      key: \"\"\n  # REDIS_EXPORTER_TLS_CLIENT_KEY_FILE  will be set to /tls/tls-client-key.key\n  clientKeyFile:\n    secret:\n      name: \"\"\n      key: \"\"\n  # REDIS_EXPORTER_TLS_CLIENT_CERT_FILE will be set to /tls/tls-client-cert.crt\n  clientCertFile:\n    secret:\n      name: \"\"\n      key: \"\"\n  # REDIS_EXPORTER_TLS_SERVER_KEY_FILE will be set to /tls/tls-server-key.key\n  serverKeyFile:\n    secret:\n      name: \"\"\n      key: \"\"\n  # REDIS_EXPORTER_TLS_SERVER_CERT_FILE will be set to /tls/tls-server-cert.crt\n  serverCertFile:\n    secret:\n      name: \"\"\n      key: \"\"\n\nserviceMonitor:\n  # When set true then use a ServiceMonitor to configure scraping\n  enabled: false\n  multipleTarget: false\n  targets: []\n  # for every targets, url and name must be set,\n  # an individual additionalRelabeling can be set for every target\n  # - url: \"redis://myredis:6379\"\n  #   name: \"my-redis\"\n  # - url: \"redis://my-redis-cluster:6379\"\n  #   name: \"bar\"\n  #   additionalRelabeling:\n  #   - sourceLabels: [type]\n  #     targetLabel: type\n  #     replacement: cluster\n  #   additionalMetricsRelabels:\n  #     type: cluster\n  additionalMetricsRelabels: {}\n  additionalRelabeling: []\n\n  # Set the namespace the ServiceMonitor should be deployed\n  # namespace: monitoring\n  # Set how frequently Prometheus should scrape\n  # interval: 30s\n  # Set path to redis-exporter telemtery-path\n  # Please set telemetryPath to /scrape if you are using multiple targets\n  # telemetryPath: /metrics\n  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator\n  # labels:\n  # Set timeout for scrape\n  # timeout: 10s\n  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config\n  # relabelings: []\n  # Set of labels to transfer on the Kubernetes Service onto the target.\n  # targetLabels: []\n  # metricRelabelings: []\n  # Set tls options\n  # scheme: \"\"\n  # tlsConfig: {}\n\n## Custom PrometheusRules to be defined\n## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart\n## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions\nprometheusRule:\n  enabled: false\n  additionalLabels: {}\n  namespace: \"\"\n  rules: []\n    ## These are just examples rules, please adapt them to your needs.\n    ## Make sure to constraint the rules to the current service.\n    #  - alert: RedisDown\n    #    expr: redis_up{service=\"{{ template \"prometheus-redis-exporter.fullname\" . }}\"} == 0\n    #    for: 2m\n    #    labels:\n    #      severity: error\n    #    annotations:\n    #      summary: Redis instance {{ \"{{ $labels.instance }}\" }} down\n    #      description: Redis instance {{ \"{{ $labels.instance }}\" }} is down.\n    #  - alert: RedisMemoryHigh\n    #    expr: \u003e\n    #       redis_memory_used_bytes{service=\"{{ template \"prometheus-redis-exporter.fullname\" . }}\"} * 100\n    #       /\n    #       redis_memory_max_bytes{service=\"{{ template \"prometheus-redis-exporter.fullname\" . }}\"}\n    #       \u003e 90 \u003c= 100\n    #    for: 2m\n    #    labels:\n    #      severity: error\n    #    annotations:\n    #      summary: Redis instance {{ \"{{ $labels.instance }}\" }} is using too much memory\n    #      description: |\n    #         Redis instance {{ \"{{ $labels.instance }}\" }} is using {{ \"{{ $value }}\" }}% of its available memory.\n    #  - alert: RedisKeyEviction\n    #    expr: |\n    #      increase(redis_evicted_keys_total{service=\"{{ template \"prometheus-redis-exporter.fullname\" . }}\"}[5m]) \u003e 0\n    #    for: 1s\n    #    labels:\n    #      severity: error\n    #    annotations:\n    #      summary: Redis instance {{ \"{{ $labels.instance }}\" }} has evicted keys\n    #      description: |\n    #        Redis instance {{ \"{{ $labels.instance }}\" }} has evicted {{ \"{{ $value }}\" }} keys in the last 5 minutes.\n\n# Used to mount a LUA-Script via config map and use it for metrics-collection\n# script:\n#   configmap: prometheus-redis-exporter-script\n#   keyname: script\n\nauth:\n  # Use password authentication\n  enabled: false\n  # Use existing secret (ignores redisPassword)\n  secret:\n    name: \"\"\n    key: \"\"\n  # Redis password (when not stored in a secret)\n  redisPassword: \"\"\n  # Redis user (version 6.X and above)\n  redisUser: \"\"\n  # Redis password file (e.g., https://github.com/oliver006/redis_exporter/blob/v1.27.0/contrib/sample-pwd-file.json)\n  # secret (useful for multiple redis instances with different passwords). If secret name and key are set\n  # this will ignore the single password auth.secret.*\n  redisPasswordFile:\n    # The secret key will be mounted into this path as a file\n    # e.g., if secret key is pass.json, the env variable\n    # REDIS_PASSWORD_FILE will be set to /auth/pass.json\n    mountPath: /auth\n    secret:\n      name: \"\"\n      key: \"\"\n\npodSecurityContext: {}\n# Example podsecurity policy\n# More information available at:\n# https://kubernetes.io/docs/concepts/security/pod-security-standards/\n# podSecurityContext:\n#   seccompProfile:\n#     type: RuntimeDefault\n#   runAsNonRoot: true\n#   runAsUser: 10001\n#   runAsGroup: 10001\n\n"
            ],
            "verify": false,
            "version": "6.8.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "tempo",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "tempo",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "tempo",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.2.3",
                "chart": "tempo",
                "name": "tempo",
                "namespace": "monitoring",
                "revision": 1,
                "values": "{\"datasources\":{\"datasources.yaml\":{\"apiVersion\":1,\"datasources\":[{\"access\":\"proxy\",\"apiVersion\":1,\"basicAuth\":false,\"editable\":false,\"isDefault\":true,\"name\":\"Tempo\",\"orgId\":1,\"type\":\"tempo\",\"uid\":\"tempo\",\"url\":\"http://tempo:3100\",\"version\":1},{\"access\":\"proxy\",\"basicAuth\":false,\"isDefault\":false,\"name\":\"Loki\",\"orgId\":1,\"type\":\"loki\",\"uid\":\"loki\",\"url\":\"http://loki:3200\"}]}},\"env\":{\"GF_AUTH_ANONYMOUS_ENABLED\":true,\"GF_AUTH_ANONYMOUS_ORG_ROLE\":\"Admin\",\"GF_AUTH_DISABLE_LOGIN_FORM\":true}}",
                "version": "1.6.2"
              }
            ],
            "name": "tempo",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "---\nenv:\n  GF_AUTH_ANONYMOUS_ENABLED: true\n  GF_AUTH_ANONYMOUS_ORG_ROLE: \"Admin\"\n  GF_AUTH_DISABLE_LOGIN_FORM: true\n\ndatasources:\n  datasources.yaml:\n    apiVersion: 1\n\n    datasources:\n      - name: Tempo\n        type: tempo\n        access: proxy\n        orgId: 1\n        url: http://tempo:3100\n        basicAuth: false\n        isDefault: true\n        version: 1\n        editable: false\n        apiVersion: 1\n        uid: tempo\n      - name: Loki\n        type: loki\n        uid: loki\n        access: proxy\n        orgId: 1\n        url: http://loki:3200\n        basicAuth: false\n        isDefault: false\n"
            ],
            "verify": false,
            "version": "1.6.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
