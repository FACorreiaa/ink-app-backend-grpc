version: "3.9"

services:
  postgres:
    env_file:
      - .env
    container_name: inkme-dev-postgres
    hostname: postgres
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5438:5432"
    restart: on-failure
    volumes:
      - ./.data/docker-postgres:/var/lib/postgresql/data
    networks:
      - ink-me
  redis:
    env_file:
      - .env
    container_name: inkme-dev-redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6382
    ports:
      - "6382:6382"
    expose:
      - "6382"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - ink-me

#  app-dev:
#    env_file:
#      - .env.compose
#    platform: linux/amd64
#    container_name: "skyvisor-insight-dev"
#    image: "skyvisor-insight-dev"
#    build:
#      dockerfile: Dockerfile
#      target: app-dev
#      context: ./
#    ports:
#      - "6969:6969"
#    volumes:
#      - ./:/app
#    #    environment:
#    #      APP_ENV: development
#
#    networks:
#      - aviation-client




  #  release-stage:
  #    platform: linux/amd64
  #    container_name: "a11199/skyvisor-insight:latest"
  #    build:
  #      dockerfile: Dockerfile
  #      target: release-stage
  #      context: ./
  #    ports:
  #      - "6969:6969"
  #    volumes:
  #      - ./:/app
  #    networks:
  #      - aviation-client
#  debug:
#    env_file:
#      - .env.compose
#    platform: linux/amd64
#    container_name: "skyvisor-insight-debug"
#    image: "skyvisor-insight-debug"
#    build:
#      dockerfile: Dockerfile
#      context: ./
#      target: app-debug
#    security_opt:
#      - seccomp:unconfined
#    cap_add:
#      - SYS_PTRACE
#    ports:
#      - "2345:2345"
#    volumes:
#      - ./:/app
#    command: "dlv --listen=:2345 --headless=true --log=true --log-output=debugger,debuglineerr,gdbwire,lldbout,rpc --accept-multiclient --api-version=2 exec ./entrypoint"
#    networks:
#      - aviation-client


#  redis-commander:
#    container_name: redis-commander
#    hostname: redis-commander
#    image: rediscommander/redis-commander:latest
#    platform: linux/amd64
#    environment:
#      - REDIS_HOSTS=local:redis:6380
#      - HTTP_USER=root
#      - HTTP_PASSWORD=qwerty
#    ports:
#      - "8082:8081"
#    expose:
#      - "8082"
#    networks:
#      - aviation-client
#    depends_on:
#      - redis
#
#  pgweb:
#    container_name: pgweb  # optional
#    restart: always  # optional
#    image: sosedoff/pgweb
#    ports:
#      - "8081:8081"
#    links:
#      - postgres:postgres  # my database container is called postgres, not db
#    depends_on:
#      - postgres
#    environment: &env
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASS}
#      POSTGRES_DB: ${DB_NAME}
#      POSTGRES_HOST_AUTH_METHOD: trust


#  server:
#    build: .
#    networks:
#      - gollama-assistant
#    depends_on:
#      - postgres
#      - redis
#    environment:
#      LOG_FORMAT: json
#      DB_HOST: postgres
#      REDIS_HOST: redis
#      ADDR: "0.0.0.0:6969"
#    ports:
#      - 6969:6969

#  otel-collector:
#    image: otel/opentelemetry-collector:latest
#    container_name: otel-collector
#    volumes:
#      - ./config/docker/otel-collector.yaml:/etc/otel-collector.yaml
#    command: [ "--config", "/etc/otel-collector.yaml" ]
#    networks:
#      - ink-me
#
#  tempo:
#    image: grafana/tempo:latest
#    container_name: tempo
#    ports:
#      - "3200:3200"
#      - "4317:4317"
#      - "4318:4318"
#    volumes:
#      - ./config/docker/tempo.yml:/etc/tempo/tempo.yml
#      - ./tempo-data:/var/tempo
#    command:
#      - '-config.file=/etc/tempo/tempo.yml'
#    networks:
#      - ink-me
#
#
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#      - --web.enable-remote-write-receiver
#      - --enable-feature=exemplar-storage
#      - --enable-feature=native-histograms
#    volumes:
#      - ./config/docker/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - ink-me
#
#  grafana:
#    image: grafana/grafana-oss:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./config/docker/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#      - ./config/dashboards/:/var/lib/grafana/dashboards
#
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
#    networks:
#      - ink-me

#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    container_name: jaeger
#    ports:
#      - "16686:16686"      # Jaeger UI (open in your browser)
#      - "6831:6831/udp"    # Jaeger Agent (thrift UDP)
#      - "14250:14250"  # OTLP gRPC receiver
#    networks:
#      - ink-me

#  loki:
#    container_name: loki
#    image: grafana/loki:main
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./config/docker/loki-config.yaml:/etc/loki/local-config.yaml
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - ink-me
#
#  promtail:
#    container_name: promtail
#    image: grafana/promtail:latest
#    volumes:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - ./config/docker/promtail-config.yaml:/etc/promtail/promtail.yaml
#    command: -config.file=/etc/promtail/promtail.yaml
#    networks:
#      - ink-me

#  k6-tracing:
#    image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
#    environment:
#      - ENDPOINT=otel-collector:4317
#    restart: always
#    depends_on:
#      - otel-collector

networks:
  ink-me:
